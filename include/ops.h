#ifndef OPS
#include <stdint.h>

#include "gas.h"
// OP(code,name,argCount,retCount,gas)
#define OPS \
OP(0x00,STOP,0,0,G_ZERO) \
OP(0x01,ADD,2,1,G_VERYLOW) \
OP(0x02,MUL,2,1,G_LOW) \
OP(0x03,SUB,2,1,G_VERYLOW) \
OP(0x04,DIV,2,1,G_LOW) \
OP(0x05,SDIV,2,1,G_LOW) \
OP(0x06,MOD,2,1,G_LOW) \
OP(0x07,SMOD,2,1,G_LOW) \
OP(0x08,ADDMOD,3,1,G_MID) \
OP(0x09,MULMOD,3,1,G_MID) \
OP(0x0a,EXP,2,1,G_EXP) \
OP(0x0b,SIGNEXTEND,2,1,G_LOW) \
OP(0x0c,ASSERT_0x0c,2,1,G_ZERO) \
OP(0x0d,ASSERT_0x0d,2,1,G_ZERO) \
OP(0x0e,ASSERT_0x0e,2,1,G_ZERO) \
OP(0x0f,ASSERT_0x0f,2,1,G_ZERO) \
OP(0x10,LT,2,1,G_VERYLOW) \
OP(0x11,GT,2,1,G_VERYLOW) \
OP(0x12,SLT,2,1,G_VERYLOW) \
OP(0x13,SGT,2,1,G_VERYLOW) \
OP(0x14,EQ,2,1,G_VERYLOW) \
OP(0x15,ISZERO,1,1,G_VERYLOW) \
OP(0x16,AND,2,1,G_VERYLOW) \
OP(0x17,OR,2,1,G_VERYLOW) \
OP(0x18,XOR,2,1,G_VERYLOW) \
OP(0x19,NOT,2,1,G_VERYLOW) \
OP(0x1a,BYTE,2,1,G_VERYLOW) \
OP(0x1b,SHL,2,1,G_VERYLOW) \
OP(0x1c,SHR,2,1,G_VERYLOW) \
OP(0x1d,SAR,2,1,G_VERYLOW) \
OP(0x1e,ASSERT_0x1e,2,1,G_ZERO) \
OP(0x1f,ASSERT_0x1f,2,1,G_ZERO) \
OP(0x20,SHA3,2,1,G_KECCAK) \
OP(0x21,ASSERT_0x21,2,1,G_ZERO) \
OP(0x22,ASSERT_0x22,2,1,G_ZERO) \
OP(0x23,ASSERT_0x23,2,1,G_ZERO) \
OP(0x24,ASSERT_0x24,2,1,G_ZERO) \
OP(0x25,ASSERT_0x25,2,1,G_ZERO) \
OP(0x26,ASSERT_0x26,2,1,G_ZERO) \
OP(0x27,ASSERT_0x27,2,1,G_ZERO) \
OP(0x28,ASSERT_0x28,2,1,G_ZERO) \
OP(0x29,ASSERT_0x29,2,1,G_ZERO) \
OP(0x2a,ASSERT_0x2a,2,1,G_ZERO) \
OP(0x2b,ASSERT_0x2b,2,1,G_ZERO) \
OP(0x2c,ASSERT_0x2c,2,1,G_ZERO) \
OP(0x2d,ASSERT_0x2d,2,1,G_ZERO) \
OP(0x2e,ASSERT_0x2e,2,1,G_ZERO) \
OP(0x2f,ASSERT_0x2f,2,1,G_ZERO) \
OP(0x30,ADDRESS,0,1,G_BASE) \
OP(0x31,BALANCE,1,1,G_ACCESS) \
OP(0x32,ORIGIN,0,1,G_BASE) \
OP(0x33,CALLER,0,1,G_BASE) \
OP(0x34,CALLVALUE,0,1,G_BASE) \
OP(0x35,CALLDATALOAD,1,1,G_VERYLOW) \
OP(0x36,CALLDATASIZE,0,1,G_BASE) \
OP(0x37,CALLDATACOPY,3,0,G_COPY) \
OP(0x38,CODESIZE,0,1,G_BASE) \
OP(0x39,CODECOPY,3,0,G_COPY) \
OP(0x3a,GASPRICE,0,1,G_BASE) \
OP(0x3b,EXTCODESIZE,1,1,G_ACCESS) \
OP(0x3c,EXTCODECOPY,4,0,G_ACCESS) \
OP(0x3d,RETURNDATASIZE,0,1,G_BASE) \
OP(0x3e,RETURNDATACOPY,3,0,G_COPY) \
OP(0x3f,EXTCODEHASH,1,1,G_ACCESS) \
OP(0x40,BLOCKHASH,1,1,G_BLOCKHASH) \
OP(0x41,COINBASE,0,1,G_BASE) \
OP(0x42,TIMESTAMP,0,1,G_BASE) \
OP(0x43,NUMBER,0,1,G_BASE) \
OP(0x44,DIFFICULTY,0,1,G_BASE) \
OP(0x45,GASLIMIT,0,1,G_BASE) \
OP(0x46,CHAINID,0,1,G_BASE) \
OP(0x47,SELFBALANCE,0,1,G_LOW) \
OP(0x48,BASEFEE,0,1,G_BASE) \
OP(0x49,SETCODE,2,0,G_SELFDESTRUCT) \
OP(0x4a,ASSERT_0x4a,0,1,G_ZERO) \
OP(0x4b,ASSERT_0x4b,0,1,G_ZERO) \
OP(0x4c,ASSERT_0x4c,0,1,G_ZERO) \
OP(0x4d,ASSERT_0x4d,0,1,G_ZERO) \
OP(0x4e,ASSERT_0x4e,0,1,G_ZERO) \
OP(0x4f,ASSERT_0x4f,0,1,G_ZERO) \
OP(0x50,POP,1,0,G_BASE) \
OP(0x51,MLOAD,1,1,G_VERYLOW) \
OP(0x52,MSTORE,2,0,G_VERYLOW) \
OP(0x53,MSTORE8,2,0,G_VERYLOW) \
OP(0x54,SLOAD,1,1,G_ACCESS) \
OP(0x55,SSTORE,2,0,G_ACCESS) \
OP(0x56,JUMP,1,0,G_MID) \
OP(0x57,JUMPI,2,0,G_HIGH) \
OP(0x58,PC,0,1,G_BASE) \
OP(0x59,MSIZE,0,1,G_BASE) \
OP(0x5a,GAS,0,1,G_BASE) \
OP(0x5b,JUMPDEST,0,0,G_JUMPDEST) \
OP(0x5c,TLOAD,1,1,G_ACCESS) \
OP(0x5d,TSTORE,2,0,G_ACCESS) \
OP(0x5e,MCOPY,3,0,G_COPY) \
OP(0x5f,PUSH0,0,1,G_BASE) \
OP(0x60,PUSH1,0,1,G_VERYLOW) \
OP(0x61,PUSH2,0,1,G_VERYLOW) \
OP(0x62,PUSH3,0,1,G_VERYLOW) \
OP(0x63,PUSH4,0,1,G_VERYLOW) \
OP(0x64,PUSH5,0,1,G_VERYLOW) \
OP(0x65,PUSH6,0,1,G_VERYLOW) \
OP(0x66,PUSH7,0,1,G_VERYLOW) \
OP(0x67,PUSH8,0,1,G_VERYLOW) \
OP(0x68,PUSH9,0,1,G_VERYLOW) \
OP(0x69,PUSH10,0,1,G_VERYLOW) \
OP(0x6a,PUSH11,0,1,G_VERYLOW) \
OP(0x6b,PUSH12,0,1,G_VERYLOW) \
OP(0x6c,PUSH13,0,1,G_VERYLOW) \
OP(0x6d,PUSH14,0,1,G_VERYLOW) \
OP(0x6e,PUSH15,0,1,G_VERYLOW) \
OP(0x6f,PUSH16,0,1,G_VERYLOW) \
OP(0x70,PUSH17,0,1,G_VERYLOW) \
OP(0x71,PUSH18,0,1,G_VERYLOW) \
OP(0x72,PUSH19,0,1,G_VERYLOW) \
OP(0x73,PUSH20,0,1,G_VERYLOW) \
OP(0x74,PUSH21,0,1,G_VERYLOW) \
OP(0x75,PUSH22,0,1,G_VERYLOW) \
OP(0x76,PUSH23,0,1,G_VERYLOW) \
OP(0x77,PUSH24,0,1,G_VERYLOW) \
OP(0x78,PUSH25,0,1,G_VERYLOW) \
OP(0x79,PUSH26,0,1,G_VERYLOW) \
OP(0x7a,PUSH27,0,1,G_VERYLOW) \
OP(0x7b,PUSH28,0,1,G_VERYLOW) \
OP(0x7c,PUSH29,0,1,G_VERYLOW) \
OP(0x7d,PUSH30,0,1,G_VERYLOW) \
OP(0x7e,PUSH31,0,1,G_VERYLOW) \
OP(0x7f,PUSH32,0,1,G_VERYLOW) \
OP(0x80,DUP1,0,1,G_VERYLOW) \
OP(0x81,DUP2,0,1,G_VERYLOW) \
OP(0x82,DUP3,0,1,G_VERYLOW) \
OP(0x83,DUP4,0,1,G_VERYLOW) \
OP(0x84,DUP5,0,1,G_VERYLOW) \
OP(0x85,DUP6,0,1,G_VERYLOW) \
OP(0x86,DUP7,0,1,G_VERYLOW) \
OP(0x87,DUP8,0,1,G_VERYLOW) \
OP(0x88,DUP9,0,1,G_VERYLOW) \
OP(0x89,DUP10,0,1,G_VERYLOW) \
OP(0x8a,DUP11,0,1,G_VERYLOW) \
OP(0x8b,DUP12,0,1,G_VERYLOW) \
OP(0x8c,DUP13,0,1,G_VERYLOW) \
OP(0x8d,DUP14,0,1,G_VERYLOW) \
OP(0x8e,DUP15,0,1,G_VERYLOW) \
OP(0x8f,DUP16,0,1,G_VERYLOW) \
OP(0x90,SWAP1,0,0,G_VERYLOW) \
OP(0x91,SWAP2,0,0,G_VERYLOW) \
OP(0x92,SWAP3,0,0,G_VERYLOW) \
OP(0x93,SWAP4,0,0,G_VERYLOW) \
OP(0x94,SWAP5,0,0,G_VERYLOW) \
OP(0x95,SWAP6,0,0,G_VERYLOW) \
OP(0x96,SWAP7,0,0,G_VERYLOW) \
OP(0x97,SWAP8,0,0,G_VERYLOW) \
OP(0x98,SWAP9,0,0,G_VERYLOW) \
OP(0x99,SWAP10,0,0,G_VERYLOW) \
OP(0x9a,SWAP11,0,0,G_VERYLOW) \
OP(0x9b,SWAP12,0,0,G_VERYLOW) \
OP(0x9c,SWAP13,0,0,G_VERYLOW) \
OP(0x9d,SWAP14,0,0,G_VERYLOW) \
OP(0x9e,SWAP15,0,0,G_VERYLOW) \
OP(0x9f,SWAP16,0,0,G_VERYLOW) \
OP(0xa0,LOG0,2,0,G_LOG) \
OP(0xa1,LOG1,3,0,G_LOG + G_LOGTOPIC) \
OP(0xa2,LOG2,4,0,G_LOG + 2 * G_LOGTOPIC) \
OP(0xa3,LOG3,5,0,G_LOG + 3 * G_LOGTOPIC) \
OP(0xa4,LOG4,6,0,G_LOG + 4 * G_LOGTOPIC) \
OP(0xa5,ASSERT_0xa5,7,0,G_ZERO) \
OP(0xa6,ASSERT_0xa6,7,0,G_ZERO) \
OP(0xa7,ASSERT_0xa7,7,0,G_ZERO) \
OP(0xa8,ASSERT_0xa8,7,0,G_ZERO) \
OP(0xa9,ASSERT_0xa9,7,0,G_ZERO) \
OP(0xaa,ASSERT_0xaa,7,0,G_ZERO) \
OP(0xab,ASSERT_0xab,7,0,G_ZERO) \
OP(0xac,ASSERT_0xac,7,0,G_ZERO) \
OP(0xad,ASSERT_0xad,7,0,G_ZERO) \
OP(0xae,ASSERT_0xae,7,0,G_ZERO) \
OP(0xaf,ASSERT_0xaf,7,0,G_ZERO) \
OP(0xb0,ASSERT_0xb0,7,0,G_ZERO) \
OP(0xb1,ASSERT_0xb1,7,0,G_ZERO) \
OP(0xb2,ASSERT_0xb2,7,0,G_ZERO) \
OP(0xb3,ASSERT_0xb3,7,0,G_ZERO) \
OP(0xb4,ASSERT_0xb4,7,0,G_ZERO) \
OP(0xb5,ASSERT_0xb5,7,0,G_ZERO) \
OP(0xb6,ASSERT_0xb6,7,0,G_ZERO) \
OP(0xb7,ASSERT_0xb7,7,0,G_ZERO) \
OP(0xb8,ASSERT_0xb8,7,0,G_ZERO) \
OP(0xb9,ASSERT_0xb9,7,0,G_ZERO) \
OP(0xba,ASSERT_0xba,7,0,G_ZERO) \
OP(0xbb,ASSERT_0xbb,7,0,G_ZERO) \
OP(0xbc,ASSERT_0xbc,7,0,G_ZERO) \
OP(0xbd,ASSERT_0xbd,7,0,G_ZERO) \
OP(0xbe,ASSERT_0xbe,7,0,G_ZERO) \
OP(0xbf,ASSERT_0xbf,7,0,G_ZERO) \
OP(0xc0,ASSERT_0xc0,7,0,G_ZERO) \
OP(0xc1,ASSERT_0xc1,7,0,G_ZERO) \
OP(0xc2,ASSERT_0xc2,7,0,G_ZERO) \
OP(0xc3,ASSERT_0xc3,7,0,G_ZERO) \
OP(0xc4,ASSERT_0xc4,7,0,G_ZERO) \
OP(0xc5,ASSERT_0xc5,7,0,G_ZERO) \
OP(0xc6,ASSERT_0xc6,7,0,G_ZERO) \
OP(0xc7,ASSERT_0xc7,7,0,G_ZERO) \
OP(0xc8,ASSERT_0xc8,7,0,G_ZERO) \
OP(0xc9,ASSERT_0xc9,7,0,G_ZERO) \
OP(0xca,ASSERT_0xca,7,0,G_ZERO) \
OP(0xcb,ASSERT_0xcb,7,0,G_ZERO) \
OP(0xcc,ASSERT_0xcc,7,0,G_ZERO) \
OP(0xcd,ASSERT_0xcd,7,0,G_ZERO) \
OP(0xce,ASSERT_0xce,7,0,G_ZERO) \
OP(0xcf,ASSERT_0xcf,7,0,G_ZERO) \
OP(0xd0,ASSERT_0xd0,7,0,G_ZERO) \
OP(0xd1,ASSERT_0xd1,7,0,G_ZERO) \
OP(0xd2,ASSERT_0xd2,7,0,G_ZERO) \
OP(0xd3,ASSERT_0xd3,7,0,G_ZERO) \
OP(0xd4,ASSERT_0xd4,7,0,G_ZERO) \
OP(0xd5,ASSERT_0xd5,7,0,G_ZERO) \
OP(0xd6,ASSERT_0xd6,7,0,G_ZERO) \
OP(0xd7,ASSERT_0xd7,7,0,G_ZERO) \
OP(0xd8,ASSERT_0xd8,7,0,G_ZERO) \
OP(0xd9,ASSERT_0xd9,7,0,G_ZERO) \
OP(0xda,ASSERT_0xda,7,0,G_ZERO) \
OP(0xdb,ASSERT_0xdb,7,0,G_ZERO) \
OP(0xdc,ASSERT_0xdc,7,0,G_ZERO) \
OP(0xdd,ASSERT_0xdd,7,0,G_ZERO) \
OP(0xde,ASSERT_0xde,7,0,G_ZERO) \
OP(0xdf,ASSERT_0xdf,7,0,G_ZERO) \
OP(0xe0,ASSERT_0xe0,7,0,G_ZERO) \
OP(0xe1,ASSERT_0xe1,7,0,G_ZERO) \
OP(0xe2,ASSERT_0xe2,7,0,G_ZERO) \
OP(0xe3,ASSERT_0xe3,7,0,G_ZERO) \
OP(0xe4,ASSERT_0xe4,7,0,G_ZERO) \
OP(0xe5,ASSERT_0xe5,7,0,G_ZERO) \
OP(0xe6,ASSERT_0xe6,7,0,G_ZERO) \
OP(0xe7,ASSERT_0xe7,7,0,G_ZERO) \
OP(0xe8,ASSERT_0xe8,7,0,G_ZERO) \
OP(0xe9,ASSERT_0xe9,7,0,G_ZERO) \
OP(0xea,ASSERT_0xea,7,0,G_ZERO) \
OP(0xeb,ASSERT_0xeb,7,0,G_ZERO) \
OP(0xec,ASSERT_0xec,7,0,G_ZERO) \
OP(0xed,ASSERT_0xed,7,0,G_ZERO) \
OP(0xee,ASSERT_0xee,7,0,G_ZERO) \
OP(0xef,ASSERT_0xef,7,0,G_ZERO) \
OP(0xf0,CREATE,3,1,G_CREATE) \
OP(0xf1,CALL,7,1,G_ACCESS) \
OP(0xf2,CALLCODE,7,1,G_ACCESS) \
OP(0xf3,RETURN,2,0,G_ZERO) \
OP(0xf4,DELEGATECALL,6,1,G_ACCESS) \
OP(0xf5,CREATE2,4,1,G_ACCESS) \
OP(0xf6,AUTH,4,1,G_AUTH) \
OP(0xf7,AUTHCALL,8,1,G_ACCESS) \
OP(0xf8,ASSERT_0xf8,6,1,G_ZERO) \
OP(0xf9,ASSERT_0xf9,6,1,G_ZERO) \
OP(0xfa,STATICCALL,6,1,G_ACCESS) \
OP(0xfb,ASSERT_0xfb,6,1,G_ZERO) \
OP(0xfc,ASSERT_0xfc,6,1,G_ZERO) \
OP(0xfd,REVERT,2,0,G_ZERO) \
OP(0xfe,INVALID,0,0,G_ZERO) \
OP(0xff,SELFDESTRUCT,1,0,G_SELFDESTRUCT)


typedef enum {
    #define OP(index,name,in,out,gas) name,
    OPS
    #undef OP
    NUM_OPCODES
} op_et;
typedef uint8_t op_t;
extern const char *opString[NUM_OPCODES];
extern const op_t argCount[NUM_OPCODES];
extern const op_t retCount[NUM_OPCODES];
extern const uint64_t gasCost[NUM_OPCODES];
op_t parseOp(const char *start, const char **endOut);

#endif // OPS
